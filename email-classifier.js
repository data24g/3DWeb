// Email patterns for backend processing
const EMAIL_PATTERNS = {
    // Pattern cho email SPAM (category_id = 2)
    spam: {
        basic: {
            titlePatterns: [
                /GI·∫¢M GI√Å.*[0-9]{2,}%/i,
                /CH·ªà.*H√îM NAY/i,
                /KHUY·∫æN M√ÉI.*KH·ª¶NG/i,
                /üí∞|üéâ|üî•|‚≠ê|üíØ/,
                /!!!/,
                /\$\$\$/,
                /CLICK.*NGAY/i,
                /FREE|MI·ªÑN PH√ç.*100%/i
            ],
            contentPatterns: [
                /gi·∫£m gi√°.*[789][0-9]%/i,
                /ch·ªâ c√≤n.*[0-9]+.*gi·ªù/i,
                /click.*ngay.*link/i,
                /bit\.ly|tinyurl|short\.link/,
                /!!!|üí∞üí∞üí∞/
            ],
            fromDomainPatterns: [
                /promo|deals|sale|offer|discount/i,
                /\d{2,}\.net|\.tk|\.ml/
            ]
        },
        advanced: {
            titlePatterns: [
                /∆∞u ƒë√£i.*ƒë·∫∑c bi·ªát/i,
                /th√¥ng b√°o.*khuy·∫øn m√£i/i,
                /c∆° h·ªôi.*hi·∫øm/i
            ],
            contentPatterns: [
                /s·ªë l∆∞·ª£ng c√≥ h·∫°n/i,
                /ƒëƒÉng k√Ω ngay ƒë·ªÉ nh·∫≠n/i,
                /∆∞u ƒë√£i d√†nh ri√™ng cho b·∫°n/i
            ],
            fromDomainPatterns: [
                /marketing@/i,
                /newsletter@/i
            ]
        }
    },
    // Pattern cho email PHISHING (category_id = 3)
    phishing: {
        basic: {
            titlePatterns: [
                /b·∫£o m·∫≠t|security/i,
                /t√†i kho·∫£n.*b·ªã.*kh√≥a/i,
                /x√°c (minh|nh·∫≠n|th·ª±c).*kh·∫©n/i,
                /c·∫≠p nh·∫≠t.*ngay/i
            ],
            contentPatterns: [
                /t√†i kho·∫£n.*s·∫Ω b·ªã.*kh√≥a/i,
                /x√°c (minh|nh·∫≠n).*trong.*[0-9]+.*gi·ªù/i,
                /click.*link.*x√°c (minh|nh·∫≠n)/i,
                /c·∫≠p nh·∫≠t.*th√¥ng tin.*b·∫£o m·∫≠t/i
            ],
            fromDomainPatterns: [
                /[0-9]/, // C√≥ s·ªë trong t√™n mi·ªÅn (amaz0n)
                /-verification|-security|-account/i,
                /\.tk|\.ml|\.ga|\.cf/
            ],
            brandSpoofing: [
                /amaz[0o]n/i,
                /g[0o]{2}gle/i,
                /micr[0o]soft/i,
                /payp[a@]l/i,
                /faceb[0o]{2}k/i
            ]
        },
        advanced: {
            titlePatterns: [
                /th√¥ng b√°o t·ª´.*ph√≤ng.*k·∫ø to√°n/i,
                /y√™u c·∫ßu x√°c nh·∫≠n.*thanh to√°n/i
            ],
            contentPatterns: [
                /vui l√≤ng ki·ªÉm tra.*ƒë√≠nh k√®m/i,
                /x√°c nh·∫≠n.*giao d·ªãch/i,
                /ƒë·ªÉ ti·∫øp t·ª•c.*vui l√≤ng/i
            ],
            fromDomainPatterns: [
                /no-?reply@.*\.(info|online|site)/i
            ]
        }
    },
    // Pattern cho email NGHI NG·ªú (category_id = 1)
    suspicious: {
        basic: {
            titlePatterns: [
                /kh·∫©n|g·∫•p|urgent/i,
                /h·∫°n ch√≥t|deadline/i,
                /quan tr·ªçng.*c·∫≠p nh·∫≠t/i
            ],
            contentPatterns: [
                /vui l√≤ng.*cung c·∫•p/i,
                /x√°c nh·∫≠n.*th√¥ng tin/i,
                /truy c·∫≠p.*link.*b√™n d∆∞·ªõi/i,
                /trong v√≤ng.*[0-9]+.*gi·ªù/i
            ],
            fromDomainPatterns: [
                /\.(info|click|site|online)$/i,
                /-system|-admin/i
            ],
            spellingErrors: [
                /recieve/i, // receive
                /occured/i, // occurred
                /loose/i,   // lose
                /there account/i // their account
            ]
        },
        advanced: {
            subtleIndicators: [
                /vui l√≤ng ph·∫£n h·ªìi s·ªõm/i,
                /th√¥ng tin n√†y l√† b·∫£o m·∫≠t/i,
                /kh√¥ng chia s·∫ª email n√†y/i
            ]
        }
    },
    // Pattern cho email AN TO√ÄN (category_id = 0)
    safe: {
        requiredPatterns: {
            fromDomainPatterns: [
                /@fpt\.edu\.vn$/,
                /@[a-z]+\.edu\.vn$/,
                /@(gmail|outlook|yahoo)\.com$/,
                /@[a-z]+(corp|company|university)\.(com|vn|edu)$/
            ],
            professionalGreetings: [
                /^k√≠nh (g·ª≠i|ch√†o)/i,
                /^th√¢n g·ª≠i/i,
                /^dear/i
            ],
            professionalClosings: [
                /tr√¢n tr·ªçng/i,
                /best regards/i,
                /th√¢n √°i/i,
                /k√≠nh th∆∞/i
            ]
        },
        mustNotHave: {
            suspiciousWords: [
                /click.*here|nh·∫•p.*v√†o ƒë√¢y/i,
                /verify.*account|x√°c minh.*t√†i kho·∫£n/i,
                /suspended|b·ªã treo/i,
                /act now|h√†nh ƒë·ªông ngay/i
            ]
        }
    }
};

// Advanced email classification function
function classifyEmailAdvanced(email) {
    const { title, content, from_email } = email;

    // Check for Phishing first (most dangerous)
    const phishingCheck = checkPhishingAdvanced(title, content, from_email);
    if (phishingCheck.isPhishing) {
        return {
            category: 'Gi·∫£ m·∫°o',
            confidence: phishingCheck.confidence,
            indicators: phishingCheck.indicators,
            level: phishingCheck.level
        };
    }

    // Check for Spam
    const spamCheck = checkSpamAdvanced(title, content, from_email);
    if (spamCheck.isSpam) {
        return {
            category: 'Spam',
            confidence: spamCheck.confidence,
            indicators: spamCheck.indicators,
            level: spamCheck.level
        };
    }

    // Check for Suspicious
    const suspiciousCheck = checkSuspiciousAdvanced(title, content, from_email);
    if (suspiciousCheck.isSuspicious) {
        return {
            category: 'Nghi ng·ªù',
            confidence: suspiciousCheck.confidence,
            indicators: suspiciousCheck.indicators,
            level: suspiciousCheck.level
        };
    }

    // Check for Safe
    const safeCheck = checkSafeAdvanced(title, content, from_email);
    if (safeCheck.isSafe) {
        return {
            category: 'An to√†n',
            confidence: safeCheck.confidence,
            indicators: ['Email t·ª´ ngu·ªìn tin c·∫≠y', 'Kh√¥ng c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù'],
            level: 'basic'
        };
    }

    // Default to suspicious if unclear
    return {
        category: 'Nghi ng·ªù',
        confidence: 0.3,
        indicators: ['Kh√¥ng th·ªÉ x√°c ƒë·ªãnh r√µ r√†ng'],
        level: 'basic'
    };
}

// Advanced phishing detection
function checkPhishingAdvanced(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.phishing;
    const indicators = [];
    let matchCount = 0;
    let level = 'basic';

    // Check for brand spoofing
    for (const brandPattern of patterns.basic.brandSpoofing) {
        if (brandPattern.test(from_email) || brandPattern.test(content)) {
            indicators.push('Gi·∫£ m·∫°o th∆∞∆°ng hi·ªáu v·ªõi k√Ω t·ª± s·ªë thay ch·ªØ');
            matchCount += 2; // High weight for brand spoofing
        }
    }

    // Check for suspicious domains
    const domain = from_email.split('@')[1] || '';
    for (const phishDomain of patterns.basic.fromDomainPatterns) {
        if (phishDomain.test(domain)) {
            indicators.push(`Domain ƒë√°ng ng·ªù: ${domain}`);
            matchCount += 2;
        }
    }

    // Check for urgency in title
    for (const pattern of patterns.basic.titlePatterns) {
        if (pattern.test(title)) {
            indicators.push('Ti√™u ƒë·ªÅ c√≥ d·∫•u hi·ªáu phishing');
            matchCount++;
        }
    }

    // Check for suspicious content
    for (const pattern of patterns.basic.contentPatterns) {
        if (pattern.test(content)) {
            indicators.push('N·ªôi dung y√™u c·∫ßu x√°c minh kh·∫©n c·∫•p');
            matchCount++;
        }
    }

    // Check for advanced patterns if basic patterns don't match enough
    if (patterns.advanced && matchCount < 3) {
        level = 'advanced';
        // Check for sophisticated indicators
        if (/ph√≤ng.*k·∫ø.*to√°n/i.test(from_email) || /accounting/i.test(from_email)) {
            indicators.push('Gi·∫£ danh ph√≤ng ban n·ªôi b·ªô');
            matchCount++;
        }
        
        // Check advanced content patterns
        for (const pattern of patterns.advanced.contentPatterns) {
            if (pattern.test(content)) {
                indicators.push('N·ªôi dung phishing tinh vi');
                matchCount++;
            }
        }
    }

    const confidence = Math.min(matchCount * 0.25, 1);

    return {
        isPhishing: matchCount >= 2,
        confidence,
        indicators,
        level
    };
}

// Advanced spam detection
function checkSpamAdvanced(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.spam;
    const indicators = [];
    let matchCount = 0;
    let level = 'basic';

    // Check for basic spam patterns in title
    for (const pattern of patterns.basic.titlePatterns) {
        if (pattern.test(title)) {
            if (/[0-9]{2,}%/i.test(title)) {
                indicators.push('Qu·∫£ng c√°o gi·∫£m gi√° l·ªõn');
            } else if (/!!!/i.test(title)) {
                indicators.push('S·ª≠ d·ª•ng nhi·ªÅu d·∫•u ch·∫•m than');
            } else if (/üí∞|üéâ|üî•/.test(title)) {
                indicators.push('S·ª≠ d·ª•ng emoji spam');
            } else {
                indicators.push('Ti√™u ƒë·ªÅ spam ƒëi·ªÉn h√¨nh');
            }
            matchCount++;
        }
    }

    // Check for spam patterns in content
    for (const pattern of patterns.basic.contentPatterns) {
        if (pattern.test(content)) {
            if (/bit\.ly|tinyurl/.test(content)) {
                indicators.push('Ch·ª©a link r√∫t g·ªçn ƒë√°ng ng·ªù');
                matchCount += 2; // High weight for shortened links
            } else {
                indicators.push('N·ªôi dung spam ƒëi·ªÉn h√¨nh');
                matchCount++;
            }
        }
    }

    // Check for spam domains
    const domain = from_email.split('@')[1] || '';
    for (const pattern of patterns.basic.fromDomainPatterns) {
        if (pattern.test(domain)) {
            indicators.push('Domain spam th∆∞∆°ng m·∫°i');
            matchCount++;
        }
    }

    // Check for advanced spam (sophisticated marketing)
    if (patterns.advanced && matchCount < 2) {
        level = 'advanced';
        for (const pattern of patterns.advanced.contentPatterns) {
            if (pattern.test(content)) {
                indicators.push('Marketing email v·ªõi trigger t√¢m l√Ω');
                matchCount++;
            }
        }
        
        // Check advanced domain patterns
        for (const pattern of patterns.advanced.fromDomainPatterns) {
            if (pattern.test(domain)) {
                indicators.push('Domain marketing chuy√™n nghi·ªáp');
                matchCount++;
            }
        }
    }

    const confidence = Math.min(matchCount * 0.3, 1);

    return {
        isSpam: matchCount >= 2,
        confidence,
        indicators,
        level
    };
}

// Advanced suspicious detection
function checkSuspiciousAdvanced(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.suspicious;
    const indicators = [];
    let matchCount = 0;
    let level = 'basic';

    // Check for urgency patterns in title
    for (const pattern of patterns.basic.titlePatterns) {
        if (pattern.test(title)) {
            indicators.push('T·∫°o √°p l·ª±c th·ªùi gian trong ti√™u ƒë·ªÅ');
            matchCount++;
        }
    }

    // Check for suspicious content patterns
    for (const pattern of patterns.basic.contentPatterns) {
        if (pattern.test(content)) {
            if (/trong v√≤ng.*[0-9]+.*gi·ªù/i.test(content)) {
                indicators.push('Y√™u c·∫ßu h√†nh ƒë·ªông trong th·ªùi gian ng·∫Øn');
            } else if (/vui l√≤ng.*cung c·∫•p/i.test(content)) {
                indicators.push('Y√™u c·∫ßu cung c·∫•p th√¥ng tin');
            } else {
                indicators.push('N·ªôi dung c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù');
            }
            matchCount++;
        }
    }

    // Check for suspicious domains
    const domain = from_email.split('@')[1] || '';
    for (const pattern of patterns.basic.fromDomainPatterns) {
        if (pattern.test(domain)) {
            indicators.push(`Domain kh√¥ng ch√≠nh th·ª©c: ${domain}`);
            matchCount++;
        }
    }

    // Check for spelling errors
    if (patterns.basic.spellingErrors) {
        const fullText = title + ' ' + content;
        for (const errorPattern of patterns.basic.spellingErrors) {
            if (errorPattern.test(fullText)) {
                indicators.push('C√≥ l·ªói ch√≠nh t·∫£ ƒë√°ng ng·ªù');
                matchCount++;
                break;
            }
        }
    }

    // Check for advanced subtle indicators
    if (patterns.advanced && matchCount < 2) {
        level = 'advanced';
        for (const pattern of patterns.advanced.subtleIndicators) {
            if (pattern.test(content)) {
                indicators.push('Email tr√¥ng chuy√™n nghi·ªáp nh∆∞ng c√≥ d·∫•u hi·ªáu nh·ªè');
                matchCount++;
            }
        }
    }

    const confidence = Math.min(matchCount * 0.35, 1);

    return {
        isSuspicious: matchCount >= 2,
        confidence,
        indicators,
        level
    };
}

// Advanced safe detection
function checkSafeAdvanced(title, content, from_email) {
    const patterns = EMAIL_PATTERNS.safe;
    let safeScore = 0;

    // Check for trusted domains
    for (const pattern of patterns.requiredPatterns.fromDomainPatterns) {
        if (pattern.test(from_email)) {
            safeScore += 2; // High weight for trusted domains
            break;
        }
    }

    // Check for professional greetings
    for (const pattern of patterns.requiredPatterns.professionalGreetings) {
        if (pattern.test(content)) {
            safeScore++;
            break;
        }
    }

    // Check for professional closings
    for (const pattern of patterns.requiredPatterns.professionalClosings) {
        if (pattern.test(content)) {
            safeScore++;
            break;
        }
    }

    // Check for suspicious words that should NOT be present
    let hasSuspiciousWords = false;
    for (const pattern of patterns.mustNotHave.suspiciousWords) {
        if (pattern.test(content) || pattern.test(title)) {
            hasSuspiciousWords = true;
            break;
        }
    }

    // Email is safe if:
    // - Has trusted domain (score >= 2) AND
    // - No suspicious words AND
    // - Has at least 1 other professional element
    const isSafe = safeScore >= 3 && !hasSuspiciousWords;
    const confidence = isSafe ? Math.min(safeScore * 0.25, 1) : 0;

    return {
        isSafe,
        confidence
    };
}

// Helper functions for result conversion
function getResultType(category) {
    switch (category) {
        case 'Gi·∫£ m·∫°o': return 'danger';
        case 'Spam': return 'warning';
        case 'Nghi ng·ªù': return 'warning';
        case 'An to√†n': return 'safe';
        default: return 'warning';
    }
}

function getResultMessage(category, confidence) {
    const confidencePercent = Math.round(confidence * 100);
    switch (category) {
        case 'Gi·∫£ m·∫°o':
            return `‚ö†Ô∏è C·∫¢NH B√ÅO: Email n√†y c√≥ d·∫•u hi·ªáu l·ª´a ƒë·∫£o cao! (${confidencePercent}%)`;
        case 'Spam':
            return `‚ö†Ô∏è C·∫¢NH B√ÅO: Email n√†y c√≥ d·∫•u hi·ªáu spam! (${confidencePercent}%)`;
        case 'Nghi ng·ªù':
            return `‚ö†Ô∏è C·∫¢NH B√ÅO: Email n√†y c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù (${confidencePercent}%)`;
        case 'An to√†n':
            return `‚úÖ Email n√†y c√≥ v·∫ª an to√†n (${confidencePercent}%)`;
        default:
            return `‚ö†Ô∏è Email n√†y c·∫ßn ƒë∆∞·ª£c ki·ªÉm tra th√™m`;
    }
}

function getResultDescription(category) {
    switch (category) {
        case 'Gi·∫£ m·∫°o':
            return 'Email n√†y c√≥ nhi·ªÅu d·∫•u hi·ªáu l·ª´a ƒë·∫£o. Kh√¥ng n√™n tr·∫£ l·ªùi ho·∫∑c cung c·∫•p th√¥ng tin.';
        case 'Spam':
            return 'Email n√†y c√≥ d·∫•u hi·ªáu spam. N√™n x√≥a v√† kh√¥ng tr·∫£ l·ªùi.';
        case 'Nghi ng·ªù':
            return 'Email n√†y c√≥ m·ªôt s·ªë d·∫•u hi·ªáu ƒë√°ng ng·ªù. H√£y th·∫≠n tr·ªçng tr∆∞·ªõc khi tr·∫£ l·ªùi.';
        case 'An to√†n':
            return 'Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu l·ª´a ƒë·∫£o r√µ r√†ng. Tuy nhi√™n v·∫´n n√™n th·∫≠n tr·ªçng.';
        default:
            return 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh r√µ r√†ng. Vui l√≤ng ki·ªÉm tra th√™m.';
    }
}

function getRiskLevel(category) {
    switch (category) {
        case 'Gi·∫£ m·∫°o': return 'high';
        case 'Spam': return 'medium';
        case 'Nghi ng·ªù': return 'medium';
        case 'An to√†n': return 'low';
        default: return 'medium';
    }
}

function getRiskIcon(category) {
    switch (category) {
        case 'Gi·∫£ m·∫°o': return 'fas fa-user-secret';
        case 'Spam': return 'fas fa-ban';
        case 'Nghi ng·ªù': return 'fas fa-question-circle';
        case 'An to√†n': return 'fas fa-shield-check';
        default: return 'fas fa-exclamation-triangle';
    }
}

// Main email analysis function for backend
function analyzeEmailBackend(emailData) {
    const { senderEmail, senderName, subject, content, urgency, requestType, suspiciousElements } = emailData;

    // Create email object for classification
    const email = {
        title: subject,
        content: content,
        from_email: senderEmail
    };

    // Use advanced email classification
    const classificationResult = classifyEmailAdvanced(email);
    
    // Convert classification result to UI format
    const resultType = getResultType(classificationResult.category);
    const resultMessage = getResultMessage(classificationResult.category, classificationResult.confidence);
    const resultDescription = getResultDescription(classificationResult.category);
    
    // Convert indicators to risk factors
    const riskFactors = classificationResult.indicators.map(indicator => ({
        level: getRiskLevel(classificationResult.category),
        text: indicator,
        icon: getRiskIcon(classificationResult.category)
    }));

    // Add additional factors based on form inputs
    if (urgency === 'high') {
        riskFactors.push({
            level: 'high',
            text: 'Email ƒë∆∞·ª£c ƒë√°nh d·∫•u kh·∫©n c·∫•p - d·∫•u hi·ªáu l·ª´a ƒë·∫£o',
            icon: 'fas fa-exclamation-triangle'
        });
    }

    if (requestType === 'payment') {
        riskFactors.push({
            level: 'high',
            text: 'Email y√™u c·∫ßu th√¥ng tin thanh to√°n - r·∫•t ƒë√°ng ng·ªù',
            icon: 'fas fa-dollar-sign'
        });
    }

    if (requestType === 'personal') {
        riskFactors.push({
            level: 'high',
            text: 'Email y√™u c·∫ßu th√¥ng tin c√° nh√¢n - c·∫ßn th·∫≠n tr·ªçng',
            icon: 'fas fa-id-card'
        });
    }

    return {
        success: true,
        data: {
            senderEmail,
            senderName,
            subject,
            content,
            urgency,
            requestType,
            suspiciousElements,
            classification: {
                category: classificationResult.category,
                confidence: classificationResult.confidence,
                level: classificationResult.level,
                indicators: classificationResult.indicators
            },
            result: {
                type: resultType,
                message: resultMessage,
                description: resultDescription,
                riskFactors: riskFactors
            },
            timestamp: new Date().toISOString()
        }
    };
}

module.exports = {
    EMAIL_PATTERNS,
    classifyEmailAdvanced,
    checkPhishingAdvanced,
    checkSpamAdvanced,
    checkSuspiciousAdvanced,
    checkSafeAdvanced,
    getResultType,
    getResultMessage,
    getResultDescription,
    getRiskLevel,
    getRiskIcon,
    analyzeEmailBackend
}; 